plugins {
    id 'org.springframework.boot' version '2.5.14'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
    id 'jacoco'
}

jacoco {
    toolVersion = "0.8.10" // Asegúrate de usar la última versión compatible
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'com.auth0:java-jwt:3.18.2'
    runtimeOnly 'com.h2database:h2'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5' // Para usar JSON con JWT
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'
    testImplementation 'org.projectlombok:lombok:1.18.28'
}

test {
    useJUnitPlatform()

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test // Asegura que las pruebas se ejecuten antes del informe
    reports {
        xml.required.set(true) // Para integración con herramientas como SonarQube
        csv.required.set(false)
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir('jacocoHtml')) // Genera el informe HTML
    }
    def mainClassFiles = fileTree(
        dir: file("${buildDir}/classes/java/main"),
        includes: ['**/*.class'],
        excludes: ['**/dto/**', '**/model/**', '**/util/**', '**/exception/**', '**/config/**']
    )
    classDirectories.setFrom(mainClassFiles)
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80 // Requiere al menos un 80% de cobertura
            }
        }
    }
}

tasks.withType(Test).configureEach {
    finalizedBy jacocoTestReport // Report is always generated after tests run
}

check.dependsOn jacocoTestCoverageVerification